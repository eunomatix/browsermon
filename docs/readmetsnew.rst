Troubleshooting
===============

This section provides some troubleshooting tips related to the Browsermon and watchdog
service.

Browsermon troubleshooting
--------------------------

Initial Checks
~~~~~~~~~~~~~~

1. **Service Status**

   -  **Windows:** Check if the service is running

      ::

         Start Menu > Services > BrowserMon

      Check the status of the service if it is running or not.

   -  **Linux:** Check if the service is running

      .. code:: bash

         systemctl status borwsermon.service

2. **Permissions**

   BrowserMon service is meant to run with the highest level of
   privileges. Although the service will give an error if not run as an
   Administrator, make sure when you install it, you run it as Admin.

3. **Logs**

   -  Review the service logs and the runtime-generated logs by
      BrowserMon. BrowserMon generates logs in the following location:

      -  Windows: ``C:/browsermon/browsermon.log``
      -  Linux: ``/opt/browsermon/browsermon.log``

   -  To see service logs that are logged by the operating system, do
      the following steps:

      -  Windows: Typically found in “Event Viewer” > “Windows logs” >
         “Application” > “Browsermon”
      -  Linux: Run the command ``journalctl -u browsermon.service``

Common Issues and Solutions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Service Won’t start
~~~~~~~~~~~~~~~~~~~

If the service is not starting, review the logs of the service. If the
service is crashing because of a runtime error, they will show in logs
generated by the operating system. How to see logs? Please refer to
**Logs** in the heading **Initial Checks**. 

Service is not behaving as expected
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the service is not behaving as expected in the configuration
make sure there are no errors in the ``browsermon.conf`` file. If it contains
any errors or typos, BrowserMon service will use default configurations,
which are:

.. code:: json

   {
       "browser": "all",
       "mode": "scheduled",
       "schedule_window": "1m",
       "logdir": "C:\\browsermon\\history or /opt/browsermon/history",
       "logmode": "csv",
       "rotation": "1m",
       "backup_count": 5
   }

History is not being logged
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the service is not logging history in the folder mentioned in the
``browsermon.conf`` file, make sure you supplied the correct folder and
path, and the folder exists.

Still, if history is not being logged, you can do the following checks:

1. Ensure the “stop saving history” option in the browser is
   disabled.
2. Make sure sync is on; sometimes when sync is off, history might not
   get saved.
3. Restart the service.
4. Restart the computer.
5. Create a new profile and check if history of that file is being
   logged.

Advanced Troubleshooting
~~~~~~~~~~~~~~~~~~~~~~~~

Windows
~~~~~~~

-  Use **Event Viewer** to find detailed error messages.
-  Execute ``sfc /scannow`` to check for and fix system file issues.
-  Check Windows updates and apply any pending updates.

Linux
~~~~~

-  Run ``dmesg | grep browser-monitor`` to check for kernel or
   hardware-related errors.
-  Check for and apply updates using your distribution’s package manager
   (e.g., ``apt``, ``yum``, etc.).
-  Use ``strace`` to monitor system calls made by the service for
   advanced debugging.

Contacting Support
~~~~~~~~~~~~~~~~~~

Download the BrowserMon troubleshooter from the website, which will
collect all logs and relevant information and save it into a file named
``browsermon_archive.zip``, which you can then transfer to the team via email support@browsermon.ai
that will help you fix the issue.

Privacy Disclaimer
~~~~~~~~~~~~~~~~~~

BrowserMon troubleshooter collects all relevant information that can
help debug the issue. Here is the list of items
BrowserMon troubleshooter will collect:

1. ``browsermon.log``
2. Installed Browser’s version Information
3. System Information (i.e., platform, platform version, architecture,
   IP address, MAC address, processor, and RAM)
4. Service Information
5. Troubleshooter will run ``procmon`` to fetch real-time event
   properties related to BrowserMon. For more information on what
   ``procmon`` monitors, please take a look at their site
   `here <https://learn.microsoft.com/en-us/sysinternals/downloads/procmon>`__.

For further details, you can take a look at the troubleshooter script on
Eunomatix’s `GitHub <https://www.github.com/eunomatix/browsermon>`__.

How to run troubleshooter?
~~~~~~~~~~~~~~~~~~~~~~~~~~

Troubleshooter script is available on GitHub with release, which you can
download and run:

For Linux:

``./browsermon_ts.sh troubleshoot --logs-dir <logs directory>``

For Windows:

``.\browsermon_ts.exe troubleshoot --logs-dir <logs directory>``

Appropriate Execution policy might need to be set before running the
script on windows.

BrowserMon troubleshooter comes with ``procmon`` (Process Monitor). The
troubleshooter uses it to monitor real-time file system, Registry, and
process/thread activity of BrowserMon process. This is only supported on
Windows.

This will open a ``procmon`` window; minimize it and let it run in the
background until the troubleshooter has collected all the information.
Once the status is at 100%, you can exit the ``procmon`` window and the
troubleshooter window. The troubleshooter will create a file named
``browsermon_archive.zip`` in the directory provided with command line
option *–logs-dir*



Watchdog troubleshooting
------------------------
This section provides some troubleshooting tips related to watchdog.

Initial Checks
~~~~~~~~~~~~~~


1. **Check Port Status** If you are experiencing issues with the
   Watchdog server, the first step is to check the status of the port watchdog is listening on.
   Follow these steps to troubleshoot:

   -  Use netstat to Check Port Status

      .. code:: bash

         netstat -tuln | grep 8900 

   -  Check if Watchdog is listening on the port 8900 and bind to
      ``0.0.0.0``

2. **Logs**

   -  Set the ``loglevel`` to ``DEBUG`` in conf file.

   -  Review the Watchdog logs and the Gunicorn Server logs. Watchdog
      generates logs in the ``logdir`` configured in conf file:

      -  Watchdog Logs
      -  Gunicorn Logs

3. **Process Status**

-  Check the status of the process if it is running or not.

   -  Check if the process is running
      ``bash     ps aux | grep Watchdog``
   -  Get the details of the process if it’s running
      ``bash     ps -p <pid> -o pid,ppid,cmd,%cpu,%mem,etime``

Common Issues and Solutions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Server Not Starting
~~~~~~~~~~~~~~~~~~~

-  Review your Watchdog Config. Ensure that you are using compatible
   version of Watchdog.
-  Review your ``license key`` and ``authcode``
.
- Things that can go wrong in the config file.
  - ``MODE:`` Set the mode to either 'local' or 'cloud' based on your deployment.
  - ``BMKEY:`` Provide the Base64-encoded license key.
  - ``AUTHCODE:`` Add the Base64-encoded authorization code.
  - ``BLACKLIST:`` Specify the blacklist configuration.
  - ``LOGDIR``: Path to your log directory.
  - ``LOGLEVEL``: Set the desired loglevel. Set it to ``DEBUG`` if the program doesn't work the intended way.
  - ``LIMIT``: Enable the rate limiting.
  - ``RATE``: Give the rate on which API is accessible.
  - ``CERTFILE``: Path to the SSL Certificate File
  - ``KEYFILE``: Path to the SSL Key File

Server Not Behaving As Expected
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Review your SSL certificate is valid and not expired.
-  Ensure you are not exceeding the max controllers limit.

Contacting Support
~~~~~~~~~~~~~~~~~~

Download the Watchdog troubleshooter from the website, to
collect all logs and relevant information and save it into a file named
``watchdog_archive.zip``, which can be shared to the team via email support@browsermon.ai that
will help you fix the issue.

-  Run the script in the same folder as the Watchdog binary or optionally use absolute paths for ``LOGDIR``, ``CERTFILE`` and ``KEYFILE`` in the config file.
-  Make sure that your config contains absolute path of log and cert
   files.
-  To run the troubleshooter, run the following command.

.. code:: bash

   ./WatchdogTS /path/to/your/watchdog.conf /path/to/your/Watchdog_binary 

Privacy Disclaimer
~~~~~~~~~~~~~~~~~~

Watchdog troubleshooter collects all relevant information that can help
debug the issue. Here is the list of items BrowserMon
troubleshooter will collect:

1. ``watchdog_*.log`` ``watchdog_gunicorn.log``
2. SSL Certificates
3. System Information (i.e., platform, platform version, architecture,
   IP address, MAC address, processor, and RAM)
4. Process Information
5. Troubleshooter will run ``lsof`` to fetch real-time event properties
   related to Watchdog.

For further details, you can take a look at the troubleshooter script on
Eunomatix’s `GitHub <https://www.github.com/eunomatix/watchdog>`__.
