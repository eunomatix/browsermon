name: Browsermon CI/CD

on:
  push:
    tags:
      - 'v*.*.*'

env:
  TAG_NAME: ${{ github.ref_name }}
  BRANCH_NAME: "release-${{ github.ref_name }}"

jobs:
  update_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check env variables
        run: |
          echo "${{ env.TAG_NAME }}"
          echo "${{ env.BRANCH_NAME }}"

      - id: change_version
        run: |
          sed -i "s/__VERSION__ = .*/__VERSION__ = '${TAG_NAME}'/" src/version.py
          sed -i "s/Description=.*/Description=Browsermon Community ${TAG_NAME} by Eunomatix/" service/browsermon.service

      - name: Commit Version Change
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Version ${{ env.TAG_NAME }}"
          branch: ${{ env.BRANCH_NAME }}
          create_branch: true

  build_shared_library:
    name: Build Shared Library
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install mingw -y --params "/exceptions:seh /arch: x86_64"
          else
            sudo apt-get update
            sudo apt-get install -y build-essential
          fi

      - name: Build Shared Library
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            gcc -shared -o json_writer_win64.dll -fPIC src/json_writer.c
          else
            gcc -shared -o json_writer_linux64.so -fPIC src/json_writer.c
          fi

      - name: Prepare Files for upload
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            mkdir windows-libraries
            cp json_writer_win64.dll windows-libraries/
          else
            mkdir linux-libraries
            cp json_writer_linux64.so linux-libraries/
          fi

      - name: Upload Libraries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-libraries
          path: |
            ${{ matrix.os }}-libraries/

  build_binary:
    name: Build Binary
    needs: build_shared_library
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        architecture: [x64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: ${{ matrix.architecture }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pywin32
          pip install -r requirements.txt

      - name: Download Libraries
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}-libraries
          path: ${{ matrix.os }}-libraries

      - name: Build
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install mingw -y --params "/exceptions:seh /arch: x86"
            gcc -m32 -shared -o json_writer_win32.dll -fPIC src/json_writer.c
            pyinstaller --hiddenimport win32timezone -F --add-binary "windows-libraries/json_writer_win32.dll:." src/browsermon.py
          else
            pyinstaller -F --add-binary "${{ matrix.os }}-libraries/json_writer_linux64.so:." src/browsermon.py
          fi

      - name: Prepare Files for upload
        run: |
          mkdir artifact
          cp dist/browsermon artifact/
          cp README.md artifact/
          cp browsermon.conf artifact/

      - name: Create Troubleshooter exe
        run: pyinstaller -F troubleshoot/browsermon_ts.py

      - name: Copy troubleshooter executeable
        run: cp dist/browsermon_ts artifact/

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: browsermon-${{ matrix.os }}-${{ matrix.architecture }}
          path: artifact/

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ build_binary ]

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: browsermon-${{ matrix.os }}-${{ matrix.architecture }}
          path: browsermon-${{ matrix.os }}-${{ matrix.architecture }}

      - name: Zip Downloaded Artifacts
        run: |
          cd browsermon-${{ matrix.os }}-${{ matrix.architecture }}
          zip -r browsermon-${{ matrix.os }}-${{ matrix.architecture }}.zip *
          cd ..

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            browsermon-${{ matrix.os }}-${{ matrix.architecture }}/browsermon-${{ matrix.os }}-${{ matrix.architecture }}.zip

          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
